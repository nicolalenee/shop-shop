{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","pages/Success.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","i","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Success","addOrder","setTimeout","saveOrder","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f8592d79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + \"s\";\n}\n\n// indexedDB helper function => persist cart data for user\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to db with version 1\n    const request = window.indexedDB.open(\"shop-shop\", 1);\n\n    // create vars to hold ref to db, transaction, and obj store\n    let db, tx, store;\n\n    // if version has changed or if first time using the db, run this method and create the obj stores\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create obj store for each type of data\n      db.createObjectStore(\"products\", { keyPath: \"_id\" });\n      db.createObjectStore(\"categories\", { keyPath: \"_id\" });\n      db.createObjectStore(\"cart\", { keyPath: \"_id\" });\n    };\n\n    //handle connection errs\n    request.onerror = function (e) {\n      console.log(\"There was an error\");\n    };\n\n    //on db open success\n    request.onsuccess = function (e) {\n      db = request.result;\n      // open a transaction w desired permissions\n      tx = db.transaction(storeName, \"readwrite\");\n      // save a ref\n      store = tx.objectStore(storeName);\n\n      // inform errs\n      db.onerror = function (e) {\n        console.log(\"error\", e);\n      };\n      // check which value we passed in as a method & perform on obj store\n      switch (method) {\n        case \"put\":\n          store.put(object);\n          resolve(object);\n          break;\n        case \"get\":\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case \"delete\":\n          store.delete(object._id);\n          break;\n        default:\n          console.log(\"No valid method!\");\n          break;\n      }\n      // when transaction is complete,close connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\n","import {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from \"./actions\";\n\nimport { useReducer } from \"react\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action.type val is `UPDATE_PRODUCTS`, return a new state object w an upd8ed products array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n    // if action.type val is `UPDATE_CATEGORIES`, return a new state object w an upd8ed categories array\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n    // if actin.type val is `UPDATE_CURRENT_CATEGORY`, return a new state object w an upd8ed currentCategory string\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n    //  if it's none of these actions, do not upd8 state and keep things the same!\n    default:\n      return state;\n  }\n};\n\n// initialize global state obj aka store\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n// cart actions\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from \"./reducers\";\n\n// instantiate the store\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: \"\",\n  });\n\n  // use this to confirm it works!\n  //  console.log(state);\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","import React from \"react\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\n\nfunction ProductItem(item) {\n  const { image, name, _id, price, quantity } = item;\n  const [state, dispatch] = useStoreContext();\n  const { cart } = state;\n  const addToCart = () => {\n    // cart item w/ the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    // if there was a match, call update w new quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise(\"cart\", \"put\", {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize(\"item\", quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from \"@apollo/client\";\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useQuery } from \"@apollo/client\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      // save in store\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      // save each product in IndexedDB\n      data.products.forEach((product) => {\n        idbPromise(\"products\", \"put\", product);\n      });\n    } else if (!loading) {\n      // check if loading is undef in useQuery() Hook\n      // since we're offline, get all of the data from the products store\n      idbPromise(\"products\", \"get\").then((products) => {\n        // use retrieved data to set store for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from \"react\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from \"../../utils/actions\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed, then run dispatch()\n    if (categoryData) {\n      // save in store\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      // save each category in IndexedDB\n      categoryData.categories.forEach((category) => {\n        idbPromise(\"categories\", \"put\", category);\n      });\n    } else if (!loading) {\n      idbPromise(\"categories\", \"get\").then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  // click handler to upd8 our store\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from \"react\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\n\nconst CartItem = ({ item }) => {\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = (item) => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id,\n    });\n    idbPromise(\"cart\", \"delete\", { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === 0) {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id,\n      });\n      idbPromise(\"cart\", \"delete\", { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value),\n      });\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt=\"\" />\n      </div>\n      <div>\n        <div>\n          {item.name}, ${item.price}\n        </div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { QUERY_CHECKOUT } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport \"./style.css\";\n\nconst stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n  // stripe useEffect\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n  // check if there's anything in the state's cart property on load.\n  // if not, retrieve data from IndexedDB\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise(\"cart\", \"get\");\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n  //console.log(state);\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { idbPromise } from \"../utils/helpers\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from \"../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from \"../assets/spinner.gif\";\nimport Cart from \"../components/Cart\";\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      // update indexedDB, use existing item data and increment\n      idbPromise(\"cart\", \"put\", {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      // if product isn't in cart yet in IndexedDB, add it\n      idbPromise(\"cart\", \"put\", { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n    // updated IndexedDB\n    idbPromise(\"cart\", \"delete\", { ...currentProduct });\n  };\n\n  useEffect(() => {\n    // check if there's data in our store's products array. if there is, we can figure out which product is the current one that we want to display\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n      // if this is the user's first time navigating to the page and there is nothing in the store yet,\n    } else if (data) {\n      // save to store\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      // save every product to IndexedDB\n      data.products.forEach((product) => {\n        idbPromise(\"products\", \"put\", product);\n      });\n    } else if (!loading) {\n      idbPromise(\"products\", \"get\").then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{\" \"}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise(\"cart\", \"get\");\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise(\"cart\", \"delete\", item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign(\"/\");\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Success from \"./pages/Success\";\nimport Nav from \"./components/Nav\";\nimport { StoreProvider } from \"./utils/GlobalState\";\n\nimport OrderHistory from \"./pages/OrderHistory\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}